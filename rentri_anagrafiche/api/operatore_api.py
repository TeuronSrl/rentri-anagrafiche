# coding: utf-8

"""
    anagrafiche

    Servizio Anagrafica RENTRI

    The version of the OpenAPI document: 1.0.20250114-603
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictStr, conint, conlist

from typing import Any, List, Optional

from rentri_anagrafiche.models.aut_albo_model import AutAlboModel
from rentri_anagrafiche.models.aut_recer_model import AutRecerModel
from rentri_anagrafiche.models.create_registro_request import CreateRegistroRequest
from rentri_anagrafiche.models.create_registro_response import CreateRegistroResponse
from rentri_anagrafiche.models.downloadable_base_response import DownloadableBaseResponse
from rentri_anagrafiche.models.operatore_model import OperatoreModel
from rentri_anagrafiche.models.registro_model import RegistroModel
from rentri_anagrafiche.models.sito_model import SitoModel
from rentri_anagrafiche.models.update_registro_operatore_request import UpdateRegistroOperatoreRequest
from rentri_anagrafiche.models.update_registro_response import UpdateRegistroResponse

from rentri_anagrafiche.api_client import ApiClient
from rentri_anagrafiche.api_response import ApiResponse
from rentri_anagrafiche.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class OperatoreApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def operatore_get(self, num_iscr_ass : Annotated[Optional[StrictStr], Field(description="Filtra l'elenco estraendo gli operatori delegati dal soggetto delegato identificato dal numero iscrizione indicato.")] = None, **kwargs) -> List[OperatoreModel]:  # noqa: E501
        """Elenco degli operatori  # noqa: E501

        Ritorna l'elenco degli operatori.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_get(num_iscr_ass, async_req=True)
        >>> result = thread.get()

        :param num_iscr_ass: Filtra l'elenco estraendo gli operatori delegati dal soggetto delegato identificato dal numero iscrizione indicato.
        :type num_iscr_ass: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[OperatoreModel]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_get_with_http_info(num_iscr_ass, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_get_with_http_info(self, num_iscr_ass : Annotated[Optional[StrictStr], Field(description="Filtra l'elenco estraendo gli operatori delegati dal soggetto delegato identificato dal numero iscrizione indicato.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Elenco degli operatori  # noqa: E501

        Ritorna l'elenco degli operatori.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_get_with_http_info(num_iscr_ass, async_req=True)
        >>> result = thread.get()

        :param num_iscr_ass: Filtra l'elenco estraendo gli operatori delegati dal soggetto delegato identificato dal numero iscrizione indicato.
        :type num_iscr_ass: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[OperatoreModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'num_iscr_ass'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('num_iscr_ass') is not None:  # noqa: E501
            _query_params.append(('num_iscr_ass', _params['num_iscr_ass']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[OperatoreModel]",
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/operatore', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def operatore_identificativo_controllo_autorizzazione_albo_get(self, identificativo : Annotated[StrictStr, Field(..., description="Codice fiscale dell'operatore")], **kwargs) -> bool:  # noqa: E501
        """Consultazione autorizzazioni Albo  # noqa: E501

        Restituisce se un operatore, identificato dal codice fiscale, è autorizzato oppure no all'Albo Nazionale Gestori Ambientali secondo quanto comunicato dall'operatore al momento dell’iscrizione al RENTRI.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_identificativo_controllo_autorizzazione_albo_get(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Codice fiscale dell'operatore (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bool
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_identificativo_controllo_autorizzazione_albo_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_identificativo_controllo_autorizzazione_albo_get_with_http_info(identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_identificativo_controllo_autorizzazione_albo_get_with_http_info(self, identificativo : Annotated[StrictStr, Field(..., description="Codice fiscale dell'operatore")], **kwargs) -> ApiResponse:  # noqa: E501
        """Consultazione autorizzazioni Albo  # noqa: E501

        Restituisce se un operatore, identificato dal codice fiscale, è autorizzato oppure no all'Albo Nazionale Gestori Ambientali secondo quanto comunicato dall'operatore al momento dell’iscrizione al RENTRI.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_identificativo_controllo_autorizzazione_albo_get_with_http_info(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Codice fiscale dell'operatore (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bool, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_identificativo_controllo_autorizzazione_albo_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "bool",
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/operatore/{identificativo}/controllo-autorizzazione-albo', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def operatore_identificativo_controllo_iscrizione_get(self, identificativo : Annotated[StrictStr, Field(..., description="Codice fiscale dell'operatore")], **kwargs) -> bool:  # noqa: E501
        """Consultazione iscrizioni  # noqa: E501

        Restituisce se un operatore, identificato dal codice fiscale, è iscritto o no al RENTRI<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_identificativo_controllo_iscrizione_get(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Codice fiscale dell'operatore (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bool
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_identificativo_controllo_iscrizione_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_identificativo_controllo_iscrizione_get_with_http_info(identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_identificativo_controllo_iscrizione_get_with_http_info(self, identificativo : Annotated[StrictStr, Field(..., description="Codice fiscale dell'operatore")], **kwargs) -> ApiResponse:  # noqa: E501
        """Consultazione iscrizioni  # noqa: E501

        Restituisce se un operatore, identificato dal codice fiscale, è iscritto o no al RENTRI<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_identificativo_controllo_iscrizione_get_with_http_info(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Codice fiscale dell'operatore (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bool, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_identificativo_controllo_iscrizione_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "bool",
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/operatore/{identificativo}/controllo-iscrizione', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def operatore_identificativo_siti_comune_id_controllo_autorizzazioni_get(self, identificativo : Annotated[StrictStr, Field(..., description="Codice fiscale dell'operatore")], comune_id : Annotated[StrictStr, Field(..., description="ISTAT comune dell'unità locale")], attivita : Annotated[Optional[Any], Field(description="Attività di recupero/smaltimento")] = None, **kwargs) -> bool:  # noqa: E501
        """Consultazione autorizzazioni unità locali  # noqa: E501

        Restituisce se un operatore, identificato dal codice fiscale, è autorizzato oppure no, relativamente alle unità locali di un comune, secondo quanto comunicato dall'operatore al momento dell’iscrizione al RENTRI.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_identificativo_siti_comune_id_controllo_autorizzazioni_get(identificativo, comune_id, attivita, async_req=True)
        >>> result = thread.get()

        :param identificativo: Codice fiscale dell'operatore (required)
        :type identificativo: str
        :param comune_id: ISTAT comune dell'unità locale (required)
        :type comune_id: str
        :param attivita: Attività di recupero/smaltimento
        :type attivita: OperazioniRecuperoSmaltimento
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bool
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_identificativo_siti_comune_id_controllo_autorizzazioni_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_identificativo_siti_comune_id_controllo_autorizzazioni_get_with_http_info(identificativo, comune_id, attivita, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_identificativo_siti_comune_id_controllo_autorizzazioni_get_with_http_info(self, identificativo : Annotated[StrictStr, Field(..., description="Codice fiscale dell'operatore")], comune_id : Annotated[StrictStr, Field(..., description="ISTAT comune dell'unità locale")], attivita : Annotated[Optional[Any], Field(description="Attività di recupero/smaltimento")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Consultazione autorizzazioni unità locali  # noqa: E501

        Restituisce se un operatore, identificato dal codice fiscale, è autorizzato oppure no, relativamente alle unità locali di un comune, secondo quanto comunicato dall'operatore al momento dell’iscrizione al RENTRI.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_identificativo_siti_comune_id_controllo_autorizzazioni_get_with_http_info(identificativo, comune_id, attivita, async_req=True)
        >>> result = thread.get()

        :param identificativo: Codice fiscale dell'operatore (required)
        :type identificativo: str
        :param comune_id: ISTAT comune dell'unità locale (required)
        :type comune_id: str
        :param attivita: Attività di recupero/smaltimento
        :type attivita: OperazioniRecuperoSmaltimento
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bool, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identificativo',
            'comune_id',
            'attivita'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_identificativo_siti_comune_id_controllo_autorizzazioni_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']

        if _params['comune_id'] is not None:
            _path_params['comune_id'] = _params['comune_id']


        # process the query parameters
        _query_params = []
        if _params.get('attivita') is not None:  # noqa: E501
            _query_params.append(('attivita', _params['attivita'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "bool",
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/operatore/{identificativo}/siti/{comune_id}/controllo-autorizzazioni', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def operatore_num_iscr_autorizzazione_albo_get(self, num_iscr : Annotated[StrictStr, Field(..., description="Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore.")], **kwargs) -> AutAlboModel:  # noqa: E501
        """Informazioni autorizzazione Albo  # noqa: E501

        Restituisce le informazioni sull'autorizzazione all'Albo Nazionale Gestori Ambientali comunicata dall'operatore al momento dell'iscrizione al RENTRI.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_num_iscr_autorizzazione_albo_get(num_iscr, async_req=True)
        >>> result = thread.get()

        :param num_iscr: Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore. (required)
        :type num_iscr: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AutAlboModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_num_iscr_autorizzazione_albo_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_num_iscr_autorizzazione_albo_get_with_http_info(num_iscr, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_num_iscr_autorizzazione_albo_get_with_http_info(self, num_iscr : Annotated[StrictStr, Field(..., description="Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Informazioni autorizzazione Albo  # noqa: E501

        Restituisce le informazioni sull'autorizzazione all'Albo Nazionale Gestori Ambientali comunicata dall'operatore al momento dell'iscrizione al RENTRI.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_num_iscr_autorizzazione_albo_get_with_http_info(num_iscr, async_req=True)
        >>> result = thread.get()

        :param num_iscr: Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore. (required)
        :type num_iscr: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AutAlboModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'num_iscr'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_num_iscr_autorizzazione_albo_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr'] is not None:
            _path_params['num_iscr'] = _params['num_iscr']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "AutAlboModel",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/operatore/{num_iscr}/autorizzazione-albo', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def operatore_num_iscr_siti_get(self, num_iscr : Annotated[StrictStr, Field(..., description="Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore.")], provincia_id : Annotated[Optional[StrictStr], Field(description="Ricerca per provincia")] = None, comune_id : Annotated[Optional[StrictStr], Field(description="Ricerca per comune")] = None, num_iscr_sito : Annotated[Optional[StrictStr], Field(description="Ricerca per Numero iscrizione unità locale rilasciato all'iscrizione. Per recuperare l'identificativo attribuito all'unità locale consultare l'operazione Elenco Unità Locali iscritte nell'area riservata Operatori dove è presente la voce Numero iscrizione unità locale")] = None, num_iscr_siti : Annotated[Optional[conlist(StrictStr)], Field(description="Ricerca per Numero iscrizione unità locali")] = None, nome_sito : Annotated[Optional[StrictStr], Field(description="Ricerca per nome unità locale")] = None, stato_delega_da_confermare : Annotated[Optional[StrictBool], Field(description="Stato delega da confermare")] = None, delega_da_associazione : Annotated[Optional[StrictBool], Field(description="Filtra le unità locali iscritte dal soggetto delegato")] = None, stato_delega : Annotated[Optional[Any], Field(description="Stato della delega")] = None, paging_page : Annotated[Optional[conint(strict=True, le=2147483647, ge=1)], Field(description="Valore per l'header Paging-Page.")] = None, paging_page_size : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Valore per l'header Paging-PageSize.")] = None, **kwargs) -> List[SitoModel]:  # noqa: E501
        """Elenco unità locali  # noqa: E501

        Ottiene l'elenco delle unità locali di un operatore.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_num_iscr_siti_get(num_iscr, provincia_id, comune_id, num_iscr_sito, num_iscr_siti, nome_sito, stato_delega_da_confermare, delega_da_associazione, stato_delega, paging_page, paging_page_size, async_req=True)
        >>> result = thread.get()

        :param num_iscr: Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore. (required)
        :type num_iscr: str
        :param provincia_id: Ricerca per provincia
        :type provincia_id: str
        :param comune_id: Ricerca per comune
        :type comune_id: str
        :param num_iscr_sito: Ricerca per Numero iscrizione unità locale rilasciato all'iscrizione. Per recuperare l'identificativo attribuito all'unità locale consultare l'operazione Elenco Unità Locali iscritte nell'area riservata Operatori dove è presente la voce Numero iscrizione unità locale
        :type num_iscr_sito: str
        :param num_iscr_siti: Ricerca per Numero iscrizione unità locali
        :type num_iscr_siti: List[str]
        :param nome_sito: Ricerca per nome unità locale
        :type nome_sito: str
        :param stato_delega_da_confermare: Stato delega da confermare
        :type stato_delega_da_confermare: bool
        :param delega_da_associazione: Filtra le unità locali iscritte dal soggetto delegato
        :type delega_da_associazione: bool
        :param stato_delega: Stato della delega
        :type stato_delega: Stati
        :param paging_page: Valore per l'header Paging-Page.
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize.
        :type paging_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[SitoModel]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_num_iscr_siti_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_num_iscr_siti_get_with_http_info(num_iscr, provincia_id, comune_id, num_iscr_sito, num_iscr_siti, nome_sito, stato_delega_da_confermare, delega_da_associazione, stato_delega, paging_page, paging_page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_num_iscr_siti_get_with_http_info(self, num_iscr : Annotated[StrictStr, Field(..., description="Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore.")], provincia_id : Annotated[Optional[StrictStr], Field(description="Ricerca per provincia")] = None, comune_id : Annotated[Optional[StrictStr], Field(description="Ricerca per comune")] = None, num_iscr_sito : Annotated[Optional[StrictStr], Field(description="Ricerca per Numero iscrizione unità locale rilasciato all'iscrizione. Per recuperare l'identificativo attribuito all'unità locale consultare l'operazione Elenco Unità Locali iscritte nell'area riservata Operatori dove è presente la voce Numero iscrizione unità locale")] = None, num_iscr_siti : Annotated[Optional[conlist(StrictStr)], Field(description="Ricerca per Numero iscrizione unità locali")] = None, nome_sito : Annotated[Optional[StrictStr], Field(description="Ricerca per nome unità locale")] = None, stato_delega_da_confermare : Annotated[Optional[StrictBool], Field(description="Stato delega da confermare")] = None, delega_da_associazione : Annotated[Optional[StrictBool], Field(description="Filtra le unità locali iscritte dal soggetto delegato")] = None, stato_delega : Annotated[Optional[Any], Field(description="Stato della delega")] = None, paging_page : Annotated[Optional[conint(strict=True, le=2147483647, ge=1)], Field(description="Valore per l'header Paging-Page.")] = None, paging_page_size : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Valore per l'header Paging-PageSize.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Elenco unità locali  # noqa: E501

        Ottiene l'elenco delle unità locali di un operatore.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_num_iscr_siti_get_with_http_info(num_iscr, provincia_id, comune_id, num_iscr_sito, num_iscr_siti, nome_sito, stato_delega_da_confermare, delega_da_associazione, stato_delega, paging_page, paging_page_size, async_req=True)
        >>> result = thread.get()

        :param num_iscr: Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore. (required)
        :type num_iscr: str
        :param provincia_id: Ricerca per provincia
        :type provincia_id: str
        :param comune_id: Ricerca per comune
        :type comune_id: str
        :param num_iscr_sito: Ricerca per Numero iscrizione unità locale rilasciato all'iscrizione. Per recuperare l'identificativo attribuito all'unità locale consultare l'operazione Elenco Unità Locali iscritte nell'area riservata Operatori dove è presente la voce Numero iscrizione unità locale
        :type num_iscr_sito: str
        :param num_iscr_siti: Ricerca per Numero iscrizione unità locali
        :type num_iscr_siti: List[str]
        :param nome_sito: Ricerca per nome unità locale
        :type nome_sito: str
        :param stato_delega_da_confermare: Stato delega da confermare
        :type stato_delega_da_confermare: bool
        :param delega_da_associazione: Filtra le unità locali iscritte dal soggetto delegato
        :type delega_da_associazione: bool
        :param stato_delega: Stato della delega
        :type stato_delega: Stati
        :param paging_page: Valore per l'header Paging-Page.
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize.
        :type paging_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[SitoModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'num_iscr',
            'provincia_id',
            'comune_id',
            'num_iscr_sito',
            'num_iscr_siti',
            'nome_sito',
            'stato_delega_da_confermare',
            'delega_da_associazione',
            'stato_delega',
            'paging_page',
            'paging_page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_num_iscr_siti_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr'] is not None:
            _path_params['num_iscr'] = _params['num_iscr']


        # process the query parameters
        _query_params = []
        if _params.get('provincia_id') is not None:  # noqa: E501
            _query_params.append(('provincia_id', _params['provincia_id']))

        if _params.get('comune_id') is not None:  # noqa: E501
            _query_params.append(('comune_id', _params['comune_id']))

        if _params.get('num_iscr_sito') is not None:  # noqa: E501
            _query_params.append(('num_iscr_sito', _params['num_iscr_sito']))

        if _params.get('num_iscr_siti') is not None:  # noqa: E501
            _query_params.append(('num_iscr_siti', _params['num_iscr_siti']))
            _collection_formats['num_iscr_siti'] = 'multi'

        if _params.get('nome_sito') is not None:  # noqa: E501
            _query_params.append(('nome_sito', _params['nome_sito']))

        if _params.get('stato_delega_da_confermare') is not None:  # noqa: E501
            _query_params.append(('stato_delega_da_confermare', _params['stato_delega_da_confermare']))

        if _params.get('delega_da_associazione') is not None:  # noqa: E501
            _query_params.append(('delega_da_associazione', _params['delega_da_associazione']))

        if _params.get('stato_delega') is not None:  # noqa: E501
            _query_params.append(('stato_delega', _params['stato_delega'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['paging_page'] is not None:
            _header_params['Paging-Page'] = _params['paging_page']

        if _params['paging_page_size'] is not None:
            _header_params['Paging-PageSize'] = _params['paging_page_size']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[SitoModel]",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/operatore/{num_iscr}/siti', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def operatore_num_iscr_siti_num_iscr_sito_autorizzazioni_get(self, num_iscr : Annotated[StrictStr, Field(..., description="Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore.")], num_iscr_sito : Annotated[StrictStr, Field(..., description="Numero iscrizione unità locale rilasciato all'iscrizione.")], **kwargs) -> List[AutRecerModel]:  # noqa: E501
        """Informazioni sulle autorizzazioni dell'unità locale  # noqa: E501

        Restituisce le informazioni sull'autorizzazione comunicate dall'operatore al momento dell'iscrizione al RENTRI relativamente l'unità locale.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_num_iscr_siti_num_iscr_sito_autorizzazioni_get(num_iscr, num_iscr_sito, async_req=True)
        >>> result = thread.get()

        :param num_iscr: Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore. (required)
        :type num_iscr: str
        :param num_iscr_sito: Numero iscrizione unità locale rilasciato all'iscrizione. (required)
        :type num_iscr_sito: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[AutRecerModel]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_num_iscr_siti_num_iscr_sito_autorizzazioni_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_num_iscr_siti_num_iscr_sito_autorizzazioni_get_with_http_info(num_iscr, num_iscr_sito, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_num_iscr_siti_num_iscr_sito_autorizzazioni_get_with_http_info(self, num_iscr : Annotated[StrictStr, Field(..., description="Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore.")], num_iscr_sito : Annotated[StrictStr, Field(..., description="Numero iscrizione unità locale rilasciato all'iscrizione.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Informazioni sulle autorizzazioni dell'unità locale  # noqa: E501

        Restituisce le informazioni sull'autorizzazione comunicate dall'operatore al momento dell'iscrizione al RENTRI relativamente l'unità locale.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_num_iscr_siti_num_iscr_sito_autorizzazioni_get_with_http_info(num_iscr, num_iscr_sito, async_req=True)
        >>> result = thread.get()

        :param num_iscr: Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore. (required)
        :type num_iscr: str
        :param num_iscr_sito: Numero iscrizione unità locale rilasciato all'iscrizione. (required)
        :type num_iscr_sito: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[AutRecerModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'num_iscr',
            'num_iscr_sito'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_num_iscr_siti_num_iscr_sito_autorizzazioni_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr'] is not None:
            _path_params['num_iscr'] = _params['num_iscr']

        if _params['num_iscr_sito'] is not None:
            _path_params['num_iscr_sito'] = _params['num_iscr_sito']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[AutRecerModel]",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/operatore/{num_iscr}/siti/{num_iscr_sito}/autorizzazioni', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def operatore_num_iscr_siti_num_iscr_sito_get(self, num_iscr : Annotated[StrictStr, Field(..., description="Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore.")], num_iscr_sito : Annotated[StrictStr, Field(..., description="Numero iscrizione unità locale rilasciato all'iscrizione.")], **kwargs) -> SitoModel:  # noqa: E501
        """Dati dell'unità locale  # noqa: E501

        Ottiene il dettaglio dell'unità locale.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_num_iscr_siti_num_iscr_sito_get(num_iscr, num_iscr_sito, async_req=True)
        >>> result = thread.get()

        :param num_iscr: Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore. (required)
        :type num_iscr: str
        :param num_iscr_sito: Numero iscrizione unità locale rilasciato all'iscrizione. (required)
        :type num_iscr_sito: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SitoModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_num_iscr_siti_num_iscr_sito_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_num_iscr_siti_num_iscr_sito_get_with_http_info(num_iscr, num_iscr_sito, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_num_iscr_siti_num_iscr_sito_get_with_http_info(self, num_iscr : Annotated[StrictStr, Field(..., description="Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore.")], num_iscr_sito : Annotated[StrictStr, Field(..., description="Numero iscrizione unità locale rilasciato all'iscrizione.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Dati dell'unità locale  # noqa: E501

        Ottiene il dettaglio dell'unità locale.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_num_iscr_siti_num_iscr_sito_get_with_http_info(num_iscr, num_iscr_sito, async_req=True)
        >>> result = thread.get()

        :param num_iscr: Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare il numero iscrizione attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore. (required)
        :type num_iscr: str
        :param num_iscr_sito: Numero iscrizione unità locale rilasciato all'iscrizione. (required)
        :type num_iscr_sito: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SitoModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'num_iscr',
            'num_iscr_sito'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_num_iscr_siti_num_iscr_sito_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr'] is not None:
            _path_params['num_iscr'] = _params['num_iscr']

        if _params['num_iscr_sito'] is not None:
            _path_params['num_iscr_sito'] = _params['num_iscr_sito']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "SitoModel",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/operatore/{num_iscr}/siti/{num_iscr_sito}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def operatore_num_iscr_siti_num_iscr_sito_registri_get(self, num_iscr : Annotated[StrictStr, Field(..., description="Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare l'identificativo attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore.")], num_iscr_sito : Annotated[StrictStr, Field(..., description="Numero iscrizione unità locale rilasciato all'iscrizione.")], identificativo_operatore : Annotated[Optional[StrictStr], Field(description="Codice fiscale dell'operatore da ricercare.")] = None, identificativo : Annotated[Optional[StrictStr], Field(description="Identificativo del registro da ricercare.")] = None, chiuso : Annotated[Optional[StrictBool], Field(description="Flag di chiusura del registro.")] = None, paging_page : Annotated[Optional[conint(strict=True, le=2147483647, ge=1)], Field(description="Valore per l'header Paging-Page.")] = None, paging_page_size : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Valore per l'header Paging-PageSize.")] = None, **kwargs) -> List[RegistroModel]:  # noqa: E501
        """Elenco registri  # noqa: E501

        Ottiene l'elenco dei registri, filtrati in base ai criteri specificati.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_num_iscr_siti_num_iscr_sito_registri_get(num_iscr, num_iscr_sito, identificativo_operatore, identificativo, chiuso, paging_page, paging_page_size, async_req=True)
        >>> result = thread.get()

        :param num_iscr: Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare l'identificativo attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore. (required)
        :type num_iscr: str
        :param num_iscr_sito: Numero iscrizione unità locale rilasciato all'iscrizione. (required)
        :type num_iscr_sito: str
        :param identificativo_operatore: Codice fiscale dell'operatore da ricercare.
        :type identificativo_operatore: str
        :param identificativo: Identificativo del registro da ricercare.
        :type identificativo: str
        :param chiuso: Flag di chiusura del registro.
        :type chiuso: bool
        :param paging_page: Valore per l'header Paging-Page.
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize.
        :type paging_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[RegistroModel]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_num_iscr_siti_num_iscr_sito_registri_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_num_iscr_siti_num_iscr_sito_registri_get_with_http_info(num_iscr, num_iscr_sito, identificativo_operatore, identificativo, chiuso, paging_page, paging_page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_num_iscr_siti_num_iscr_sito_registri_get_with_http_info(self, num_iscr : Annotated[StrictStr, Field(..., description="Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare l'identificativo attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore.")], num_iscr_sito : Annotated[StrictStr, Field(..., description="Numero iscrizione unità locale rilasciato all'iscrizione.")], identificativo_operatore : Annotated[Optional[StrictStr], Field(description="Codice fiscale dell'operatore da ricercare.")] = None, identificativo : Annotated[Optional[StrictStr], Field(description="Identificativo del registro da ricercare.")] = None, chiuso : Annotated[Optional[StrictBool], Field(description="Flag di chiusura del registro.")] = None, paging_page : Annotated[Optional[conint(strict=True, le=2147483647, ge=1)], Field(description="Valore per l'header Paging-Page.")] = None, paging_page_size : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Valore per l'header Paging-PageSize.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Elenco registri  # noqa: E501

        Ottiene l'elenco dei registri, filtrati in base ai criteri specificati.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_num_iscr_siti_num_iscr_sito_registri_get_with_http_info(num_iscr, num_iscr_sito, identificativo_operatore, identificativo, chiuso, paging_page, paging_page_size, async_req=True)
        >>> result = thread.get()

        :param num_iscr: Numero iscrizione operatore rilasciato all'iscrizione. Per recuperare l'identificativo attribuito all'operatore consultare l'operazione Elenco Operatori iscritti nell'area riservata Operatori dove è presente la voce Num. iscr. operatore. (required)
        :type num_iscr: str
        :param num_iscr_sito: Numero iscrizione unità locale rilasciato all'iscrizione. (required)
        :type num_iscr_sito: str
        :param identificativo_operatore: Codice fiscale dell'operatore da ricercare.
        :type identificativo_operatore: str
        :param identificativo: Identificativo del registro da ricercare.
        :type identificativo: str
        :param chiuso: Flag di chiusura del registro.
        :type chiuso: bool
        :param paging_page: Valore per l'header Paging-Page.
        :type paging_page: int
        :param paging_page_size: Valore per l'header Paging-PageSize.
        :type paging_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[RegistroModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'num_iscr',
            'num_iscr_sito',
            'identificativo_operatore',
            'identificativo',
            'chiuso',
            'paging_page',
            'paging_page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_num_iscr_siti_num_iscr_sito_registri_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['num_iscr'] is not None:
            _path_params['num_iscr'] = _params['num_iscr']

        if _params['num_iscr_sito'] is not None:
            _path_params['num_iscr_sito'] = _params['num_iscr_sito']


        # process the query parameters
        _query_params = []
        if _params.get('identificativo_operatore') is not None:  # noqa: E501
            _query_params.append(('identificativo_operatore', _params['identificativo_operatore']))

        if _params.get('identificativo') is not None:  # noqa: E501
            _query_params.append(('identificativo', _params['identificativo']))

        if _params.get('chiuso') is not None:  # noqa: E501
            _query_params.append(('chiuso', _params['chiuso']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['paging_page'] is not None:
            _header_params['Paging-Page'] = _params['paging_page']

        if _params['paging_page_size'] is not None:
            _header_params['Paging-PageSize'] = _params['paging_page_size']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[RegistroModel]",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/operatore/{num_iscr}/siti/{num_iscr_sito}/registri', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def operatore_registri_identificativo_delete(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro da chiudere.")], **kwargs) -> None:  # noqa: E501
        """Chiudi registro  # noqa: E501

        Chiude un registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre un codice di stato 422) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_registri_identificativo_delete(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro da chiudere. (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_registri_identificativo_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_registri_identificativo_delete_with_http_info(identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_registri_identificativo_delete_with_http_info(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro da chiudere.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Chiudi registro  # noqa: E501

        Chiude un registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre un codice di stato 422) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_registri_identificativo_delete_with_http_info(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro da chiudere. (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_registri_identificativo_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/operatore/registri/{identificativo}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def operatore_registri_identificativo_get(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro.")], **kwargs) -> RegistroModel:  # noqa: E501
        """Dati registro  # noqa: E501

        Ottiene il dettaglio di un registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_registri_identificativo_get(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro. (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RegistroModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_registri_identificativo_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_registri_identificativo_get_with_http_info(identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_registri_identificativo_get_with_http_info(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Dati registro  # noqa: E501

        Ottiene il dettaglio di un registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_registri_identificativo_get_with_http_info(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro. (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RegistroModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_registri_identificativo_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "RegistroModel",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/operatore/registri/{identificativo}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def operatore_registri_identificativo_put(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro da chiudere.")], update_registro_operatore_request : Annotated[Optional[UpdateRegistroOperatoreRequest], Field(description="Dati di modifica del registro")] = None, **kwargs) -> UpdateRegistroResponse:  # noqa: E501
        """Modifica registro  # noqa: E501

        Modifica di un registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre un codice di stato 422) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_registri_identificativo_put(identificativo, update_registro_operatore_request, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro da chiudere. (required)
        :type identificativo: str
        :param update_registro_operatore_request: Dati di modifica del registro
        :type update_registro_operatore_request: UpdateRegistroOperatoreRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UpdateRegistroResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_registri_identificativo_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_registri_identificativo_put_with_http_info(identificativo, update_registro_operatore_request, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_registri_identificativo_put_with_http_info(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro da chiudere.")], update_registro_operatore_request : Annotated[Optional[UpdateRegistroOperatoreRequest], Field(description="Dati di modifica del registro")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Modifica registro  # noqa: E501

        Modifica di un registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre un codice di stato 422) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_registri_identificativo_put_with_http_info(identificativo, update_registro_operatore_request, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro da chiudere. (required)
        :type identificativo: str
        :param update_registro_operatore_request: Dati di modifica del registro
        :type update_registro_operatore_request: UpdateRegistroOperatoreRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UpdateRegistroResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identificativo',
            'update_registro_operatore_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_registri_identificativo_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_registro_operatore_request'] is not None:
            _body_params = _params['update_registro_operatore_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "UpdateRegistroResponse",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/operatore/registri/{identificativo}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def operatore_registri_identificativo_xml_get(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro.")], **kwargs) -> DownloadableBaseResponse:  # noqa: E501
        """Vidimazione virtuale registro in formato XML  # noqa: E501

        Ottiene la vidimazione virtuale del Registro in formato XML.  Rif. MODALITÀ OPERATIVA (8): Vidimazione digitale del registro cronologico di carico e scarico.  Nella fase di creazione di un nuovo registro, la piattaforma telematica RENTRI accede al servizio  per la vidimazione digitale messo a disposizione dalle Camere di Commercio e restituisce l'identificativo  unico nazionale del registro cronologico di carico e scarico.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_registri_identificativo_xml_get(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro. (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DownloadableBaseResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_registri_identificativo_xml_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_registri_identificativo_xml_get_with_http_info(identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_registri_identificativo_xml_get_with_http_info(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Vidimazione virtuale registro in formato XML  # noqa: E501

        Ottiene la vidimazione virtuale del Registro in formato XML.  Rif. MODALITÀ OPERATIVA (8): Vidimazione digitale del registro cronologico di carico e scarico.  Nella fase di creazione di un nuovo registro, la piattaforma telematica RENTRI accede al servizio  per la vidimazione digitale messo a disposizione dalle Camere di Commercio e restituisce l'identificativo  unico nazionale del registro cronologico di carico e scarico.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_registri_identificativo_xml_get_with_http_info(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro. (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DownloadableBaseResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_registri_identificativo_xml_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "DownloadableBaseResponse",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/operatore/registri/{identificativo}/xml', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def operatore_registri_post(self, create_registro_request : Annotated[Optional[CreateRegistroRequest], Field(description="Richiesta.")] = None, **kwargs) -> CreateRegistroResponse:  # noqa: E501
        """Apertura nuovo registro  # noqa: E501

        Apre un nuovo registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre un codice di stato 422) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_registri_post(create_registro_request, async_req=True)
        >>> result = thread.get()

        :param create_registro_request: Richiesta.
        :type create_registro_request: CreateRegistroRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateRegistroResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the operatore_registri_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.operatore_registri_post_with_http_info(create_registro_request, **kwargs)  # noqa: E501

    @validate_arguments
    def operatore_registri_post_with_http_info(self, create_registro_request : Annotated[Optional[CreateRegistroRequest], Field(description="Richiesta.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Apertura nuovo registro  # noqa: E501

        Apre un nuovo registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre un codice di stato 422) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.operatore_registri_post_with_http_info(create_registro_request, async_req=True)
        >>> result = thread.get()

        :param create_registro_request: Richiesta.
        :type create_registro_request: CreateRegistroRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateRegistroResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_registro_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operatore_registri_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_registro_request'] is not None:
            _body_params = _params['create_registro_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '201': "CreateRegistroResponse",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/operatore/registri', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def registri_identificativo_delete(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro da chiudere.")], **kwargs) -> None:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /operatore/registri/{identificativo} - Chiudi registro  # noqa: E501

        Chiude un registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre un codice di stato 422) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.registri_identificativo_delete(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro da chiudere. (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the registri_identificativo_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.registri_identificativo_delete_with_http_info(identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def registri_identificativo_delete_with_http_info(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro da chiudere.")], **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /operatore/registri/{identificativo} - Chiudi registro  # noqa: E501

        Chiude un registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre un codice di stato 422) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.registri_identificativo_delete_with_http_info(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro da chiudere. (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        warnings.warn("DELETE /registri/{identificativo} is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registri_identificativo_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/registri/{identificativo}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def registri_identificativo_get(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro.")], **kwargs) -> RegistroModel:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /operatore/registri/{identificativo} - Dati registro  # noqa: E501

        Ottiene il dettaglio di un registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.registri_identificativo_get(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro. (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RegistroModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the registri_identificativo_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.registri_identificativo_get_with_http_info(identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def registri_identificativo_get_with_http_info(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro.")], **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /operatore/registri/{identificativo} - Dati registro  # noqa: E501

        Ottiene il dettaglio di un registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.registri_identificativo_get_with_http_info(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro. (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RegistroModel, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /registri/{identificativo} is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registri_identificativo_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "RegistroModel",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/registri/{identificativo}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def registri_identificativo_put(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro da chiudere.")], update_registro_operatore_request : Annotated[Optional[UpdateRegistroOperatoreRequest], Field(description="Dati di modifica del registro")] = None, **kwargs) -> UpdateRegistroResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /operatore/registri/{identificativo} - Modifica registro  # noqa: E501

        Modifica di un registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre un codice di stato 422) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.registri_identificativo_put(identificativo, update_registro_operatore_request, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro da chiudere. (required)
        :type identificativo: str
        :param update_registro_operatore_request: Dati di modifica del registro
        :type update_registro_operatore_request: UpdateRegistroOperatoreRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UpdateRegistroResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the registri_identificativo_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.registri_identificativo_put_with_http_info(identificativo, update_registro_operatore_request, **kwargs)  # noqa: E501

    @validate_arguments
    def registri_identificativo_put_with_http_info(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro da chiudere.")], update_registro_operatore_request : Annotated[Optional[UpdateRegistroOperatoreRequest], Field(description="Dati di modifica del registro")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /operatore/registri/{identificativo} - Modifica registro  # noqa: E501

        Modifica di un registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre un codice di stato 422) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.registri_identificativo_put_with_http_info(identificativo, update_registro_operatore_request, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro da chiudere. (required)
        :type identificativo: str
        :param update_registro_operatore_request: Dati di modifica del registro
        :type update_registro_operatore_request: UpdateRegistroOperatoreRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UpdateRegistroResponse, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("PUT /registri/{identificativo} is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'identificativo',
            'update_registro_operatore_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registri_identificativo_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_registro_operatore_request'] is not None:
            _body_params = _params['update_registro_operatore_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "UpdateRegistroResponse",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/registri/{identificativo}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def registri_identificativo_xml_get(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro.")], **kwargs) -> DownloadableBaseResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /operatore/registri/{identificativo}/xml - Vidimazione virtuale registro in formato XML  # noqa: E501

        Ottiene la vidimazione virtuale del Registro in formato XML.  Rif. MODALITÀ OPERATIVA (8): Vidimazione digitale del registro cronologico di carico e scarico.  Nella fase di creazione di un nuovo registro, la piattaforma telematica RENTRI accede al servizio  per la vidimazione digitale messo a disposizione dalle Camere di Commercio e restituisce l'identificativo  unico nazionale del registro cronologico di carico e scarico.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.registri_identificativo_xml_get(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro. (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DownloadableBaseResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the registri_identificativo_xml_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.registri_identificativo_xml_get_with_http_info(identificativo, **kwargs)  # noqa: E501

    @validate_arguments
    def registri_identificativo_xml_get_with_http_info(self, identificativo : Annotated[StrictStr, Field(..., description="Identificativo del registro.")], **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /operatore/registri/{identificativo}/xml - Vidimazione virtuale registro in formato XML  # noqa: E501

        Ottiene la vidimazione virtuale del Registro in formato XML.  Rif. MODALITÀ OPERATIVA (8): Vidimazione digitale del registro cronologico di carico e scarico.  Nella fase di creazione di un nuovo registro, la piattaforma telematica RENTRI accede al servizio  per la vidimazione digitale messo a disposizione dalle Camere di Commercio e restituisce l'identificativo  unico nazionale del registro cronologico di carico e scarico.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre una risposta vuota) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.registri_identificativo_xml_get_with_http_info(identificativo, async_req=True)
        >>> result = thread.get()

        :param identificativo: Identificativo del registro. (required)
        :type identificativo: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DownloadableBaseResponse, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /registri/{identificativo}/xml is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'identificativo'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registri_identificativo_xml_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['identificativo'] is not None:
            _path_params['identificativo'] = _params['identificativo']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "DownloadableBaseResponse",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/registri/{identificativo}/xml', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def registri_post(self, create_registro_request : Annotated[Optional[CreateRegistroRequest], Field(description="Richiesta.")] = None, **kwargs) -> CreateRegistroResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /operatore/registri - Apertura nuovo registro  # noqa: E501

        Apre un nuovo registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre un codice di stato 422) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.registri_post(create_registro_request, async_req=True)
        >>> result = thread.get()

        :param create_registro_request: Richiesta.
        :type create_registro_request: CreateRegistroRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateRegistroResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the registri_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.registri_post_with_http_info(create_registro_request, **kwargs)  # noqa: E501

    @validate_arguments
    def registri_post_with_http_info(self, create_registro_request : Annotated[Optional[CreateRegistroRequest], Field(description="Richiesta.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) ⚠️[DEPRECATO] - utilizzare /operatore/registri - Apertura nuovo registro  # noqa: E501

        Apre un nuovo registro.<hr/><i>Servizio richiamabile in modalità <b>STUB</b> (le richieste restituiranno sempre un codice di stato 422) anche in ambiente di produzione.</i><hr/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.registri_post_with_http_info(create_registro_request, async_req=True)
        >>> result = thread.get()

        :param create_registro_request: Richiesta.
        :type create_registro_request: CreateRegistroRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateRegistroResponse, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("POST /registri is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'create_registro_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registri_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_registro_request'] is not None:
            _body_params = _params['create_registro_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '201': "CreateRegistroResponse",
            '400': "ProblemDetails",
            '403': None,
            '404': None,
            '429': None,
            '500': "ProblemDetails",
        }

        return self.api_client.call_api(
            '/registri', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
