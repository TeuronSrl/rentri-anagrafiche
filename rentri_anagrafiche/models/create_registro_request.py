# coding: utf-8

"""
    anagrafiche

    Servizio Anagrafica RENTRI

    The version of the OpenAPI document: 1.0.20250114-603
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist, constr
from rentri_anagrafiche.models.attivita import Attivita
from rentri_anagrafiche.models.operazioni_recupero_smaltimento import OperazioniRecuperoSmaltimento

class CreateRegistroRequest(BaseModel):
    """
    CreateRegistroRequest
    """
    num_iscr_sito: constr(strict=True, min_length=1) = Field(default=..., description="Numero iscrizione unità locale rilasciato all'iscrizione. Per recuperare l'identificativo attribuito all'unità locale delegante consultare l'operazione Elenco unità locali deleganti  nell'area riservata Soggetti delegati dove è presente la voce Num. iscr. UL.")
    attivita: conlist(Attivita, min_items=1) = Field(default=..., description="Attività legate al registro<p>Valori ammessi:<ul style=\"margin:0\"><li><i>CentroRaccolta</i> - Centro di raccolta</li><li><i>Produzione</i> - Produzione di rifiuti</li><li><i>Recupero</i> - Recupero di rifiuti</li><li><i>Smaltimento</i> - Smaltimento di rifiuti</li><li><i>Trasporto</i> - Trasporto di rifiuti</li><li><i>IntermediazioneSenzaDetenzione</i> - Intermediazione e commercio di rifiuti senza detenzione</li></ul></p>")
    descrizione: Optional[constr(strict=True, max_length=250)] = Field(default=None, description="Descrizione del registro")
    attivita_rec_smalt: Optional[conlist(OperazioniRecuperoSmaltimento)] = Field(default=None, description="Attività recupero smaltimento<p>Valori ammessi:<ul style=\"margin:0\"><li><i>R1</i> - Utilizzazione principale come combustibile o come altro mezzo per produrre energia</li><li><i>R2</i> - Rigenerazione/recupero di solventi</li><li><i>R3</i> - Riciclo/recupero delle sostanze organiche non utilizzate come solventi</li><li><i>R4</i> - Riciclo/recupero dei metalli e dei composti metallici</li><li><i>R5</i> - Riciclo/recupero di altre sostanze inorganiche</li><li><i>R6</i> - Rigenerazione degli acidi o delle basi</li><li><i>R7</i> - Recupero dei prodotti che servono a captare gli inquinanti</li><li><i>R8</i> - Recupero dei prodotti provenienti dai catalizzatori</li><li><i>R9</i> - Rigenerazione o altri reimpieghi degli oli</li><li><i>R10</i> - Spandimento sul suolo a beneficio dell'agricoltura o dell'ecologia</li><li><i>R11</i> - Utilizzazione di rifiuti ottenuti da una delle operazioni indicate da R1 a R10</li><li><i>R12</i> - Scambio di rifiuti per sottoporli a una delle operazioni indicate da R1 a R11</li><li><i>R13</i> - Messa in riserva di rifiuti per sottoporli a una delle operazioni indicate nei punti da R1 a R12</li><li><i>D1</i> - Deposito sul o nel suolo</li><li><i>D2</i> - Trattamento in ambiente terrestre</li><li><i>D3</i> - Iniezioni in profondità</li><li><i>D4</i> - Lagunaggio</li><li><i>D5</i> - Messa in discarica specialmente allestita</li><li><i>D6</i> - Scarico dei rifiuti solidi nell'ambiente idrico eccetto l'immersione</li><li><i>D7</i> - Immersione, compreso il seppellimento nel sottosuolo marino</li><li><i>D8</i> - Trattamento biologico non specificato altrove nel presente allegato</li><li><i>D9</i> - Trattamento fisico-chimico non specificato altrove nel presente allegato</li><li><i>D10</i> - Incenerimento a terra</li><li><i>D11</i> - Incenerimento in mare</li><li><i>D12</i> - Deposito permanente</li><li><i>D13</i> - Raggruppamento preliminare prima di una delle operazioni di cui ai punti da D1 a D12</li><li><i>D14</i> - Ricondizionamento preliminare prima di una delle operazioni di cui ai punti da D1 a D13</li><li><i>D15</i> - Deposito preliminare prima di una delle operazioni di cui ai punti da D1 a D14</li></ul></p>")
    __properties = ["num_iscr_sito", "attivita", "descrizione", "attivita_rec_smalt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateRegistroRequest:
        """Create an instance of CreateRegistroRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if descrizione (nullable) is None
        # and __fields_set__ contains the field
        if self.descrizione is None and "descrizione" in self.__fields_set__:
            _dict['descrizione'] = None

        # set to None if attivita_rec_smalt (nullable) is None
        # and __fields_set__ contains the field
        if self.attivita_rec_smalt is None and "attivita_rec_smalt" in self.__fields_set__:
            _dict['attivita_rec_smalt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateRegistroRequest:
        """Create an instance of CreateRegistroRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateRegistroRequest.parse_obj(obj)

        _obj = CreateRegistroRequest.parse_obj({
            "num_iscr_sito": obj.get("num_iscr_sito"),
            "attivita": obj.get("attivita"),
            "descrizione": obj.get("descrizione"),
            "attivita_rec_smalt": obj.get("attivita_rec_smalt")
        })
        return _obj


