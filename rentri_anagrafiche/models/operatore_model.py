# coding: utf-8

"""
    anagrafiche

    Servizio Anagrafica RENTRI

    The version of the OpenAPI document: 1.0.20250114-603
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rentri_anagrafiche.models.profili_soggetto import ProfiliSoggetto
from typing import Optional, Set
from typing_extensions import Self

class OperatoreModel(BaseModel):
    """
    Operatore
    """ # noqa: E501
    num_iscr: Optional[StrictStr] = None
    profilo_soggetto: Optional[ProfiliSoggetto] = None
    data_iscrizione: Optional[datetime] = None
    identificativo: Optional[StrictStr] = None
    ipa: Optional[StrictStr] = None
    denominazione: Optional[StrictStr] = None
    forma_giuridica_id: Optional[StrictStr] = None
    piva: Optional[StrictStr] = None
    cciaarea: Optional[StrictStr] = None
    nrea: Optional[StrictStr] = None
    data_iscrizione_ri: Optional[datetime] = None
    stato_impresa_ri: Optional[StrictStr] = None
    dipendenti_ri: Optional[StrictInt] = None
    data_rilevazione_dipendenti_ri: Optional[datetime] = None
    nazione_slid: Optional[StrictStr] = None
    provincia_slid: Optional[StrictStr] = None
    comune_slid: Optional[StrictStr] = None
    citta_sl: Optional[StrictStr] = None
    indirizzo_sl: Optional[StrictStr] = None
    civico_sl: Optional[StrictStr] = None
    capsl: Optional[StrictStr] = None
    pec: Optional[StrictStr] = None
    cod_fisc_lr: Optional[StrictStr] = None
    cognome_lr: Optional[StrictStr] = None
    nome_lr: Optional[StrictStr] = None
    dipendenti: Optional[StrictInt] = None
    data_ultima_visura: Optional[datetime] = None
    flag_esonerato_iscr_albo: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["num_iscr", "profilo_soggetto", "data_iscrizione", "identificativo", "ipa", "denominazione", "forma_giuridica_id", "piva", "cciaarea", "nrea", "data_iscrizione_ri", "stato_impresa_ri", "dipendenti_ri", "data_rilevazione_dipendenti_ri", "nazione_slid", "provincia_slid", "comune_slid", "citta_sl", "indirizzo_sl", "civico_sl", "capsl", "pec", "cod_fisc_lr", "cognome_lr", "nome_lr", "dipendenti", "data_ultima_visura", "flag_esonerato_iscr_albo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperatoreModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if num_iscr (nullable) is None
        # and model_fields_set contains the field
        if self.num_iscr is None and "num_iscr" in self.model_fields_set:
            _dict['num_iscr'] = None

        # set to None if data_iscrizione (nullable) is None
        # and model_fields_set contains the field
        if self.data_iscrizione is None and "data_iscrizione" in self.model_fields_set:
            _dict['data_iscrizione'] = None

        # set to None if identificativo (nullable) is None
        # and model_fields_set contains the field
        if self.identificativo is None and "identificativo" in self.model_fields_set:
            _dict['identificativo'] = None

        # set to None if ipa (nullable) is None
        # and model_fields_set contains the field
        if self.ipa is None and "ipa" in self.model_fields_set:
            _dict['ipa'] = None

        # set to None if denominazione (nullable) is None
        # and model_fields_set contains the field
        if self.denominazione is None and "denominazione" in self.model_fields_set:
            _dict['denominazione'] = None

        # set to None if forma_giuridica_id (nullable) is None
        # and model_fields_set contains the field
        if self.forma_giuridica_id is None and "forma_giuridica_id" in self.model_fields_set:
            _dict['forma_giuridica_id'] = None

        # set to None if piva (nullable) is None
        # and model_fields_set contains the field
        if self.piva is None and "piva" in self.model_fields_set:
            _dict['piva'] = None

        # set to None if cciaarea (nullable) is None
        # and model_fields_set contains the field
        if self.cciaarea is None and "cciaarea" in self.model_fields_set:
            _dict['cciaarea'] = None

        # set to None if nrea (nullable) is None
        # and model_fields_set contains the field
        if self.nrea is None and "nrea" in self.model_fields_set:
            _dict['nrea'] = None

        # set to None if data_iscrizione_ri (nullable) is None
        # and model_fields_set contains the field
        if self.data_iscrizione_ri is None and "data_iscrizione_ri" in self.model_fields_set:
            _dict['data_iscrizione_ri'] = None

        # set to None if stato_impresa_ri (nullable) is None
        # and model_fields_set contains the field
        if self.stato_impresa_ri is None and "stato_impresa_ri" in self.model_fields_set:
            _dict['stato_impresa_ri'] = None

        # set to None if dipendenti_ri (nullable) is None
        # and model_fields_set contains the field
        if self.dipendenti_ri is None and "dipendenti_ri" in self.model_fields_set:
            _dict['dipendenti_ri'] = None

        # set to None if data_rilevazione_dipendenti_ri (nullable) is None
        # and model_fields_set contains the field
        if self.data_rilevazione_dipendenti_ri is None and "data_rilevazione_dipendenti_ri" in self.model_fields_set:
            _dict['data_rilevazione_dipendenti_ri'] = None

        # set to None if nazione_slid (nullable) is None
        # and model_fields_set contains the field
        if self.nazione_slid is None and "nazione_slid" in self.model_fields_set:
            _dict['nazione_slid'] = None

        # set to None if provincia_slid (nullable) is None
        # and model_fields_set contains the field
        if self.provincia_slid is None and "provincia_slid" in self.model_fields_set:
            _dict['provincia_slid'] = None

        # set to None if comune_slid (nullable) is None
        # and model_fields_set contains the field
        if self.comune_slid is None and "comune_slid" in self.model_fields_set:
            _dict['comune_slid'] = None

        # set to None if citta_sl (nullable) is None
        # and model_fields_set contains the field
        if self.citta_sl is None and "citta_sl" in self.model_fields_set:
            _dict['citta_sl'] = None

        # set to None if indirizzo_sl (nullable) is None
        # and model_fields_set contains the field
        if self.indirizzo_sl is None and "indirizzo_sl" in self.model_fields_set:
            _dict['indirizzo_sl'] = None

        # set to None if civico_sl (nullable) is None
        # and model_fields_set contains the field
        if self.civico_sl is None and "civico_sl" in self.model_fields_set:
            _dict['civico_sl'] = None

        # set to None if capsl (nullable) is None
        # and model_fields_set contains the field
        if self.capsl is None and "capsl" in self.model_fields_set:
            _dict['capsl'] = None

        # set to None if pec (nullable) is None
        # and model_fields_set contains the field
        if self.pec is None and "pec" in self.model_fields_set:
            _dict['pec'] = None

        # set to None if cod_fisc_lr (nullable) is None
        # and model_fields_set contains the field
        if self.cod_fisc_lr is None and "cod_fisc_lr" in self.model_fields_set:
            _dict['cod_fisc_lr'] = None

        # set to None if cognome_lr (nullable) is None
        # and model_fields_set contains the field
        if self.cognome_lr is None and "cognome_lr" in self.model_fields_set:
            _dict['cognome_lr'] = None

        # set to None if nome_lr (nullable) is None
        # and model_fields_set contains the field
        if self.nome_lr is None and "nome_lr" in self.model_fields_set:
            _dict['nome_lr'] = None

        # set to None if dipendenti (nullable) is None
        # and model_fields_set contains the field
        if self.dipendenti is None and "dipendenti" in self.model_fields_set:
            _dict['dipendenti'] = None

        # set to None if data_ultima_visura (nullable) is None
        # and model_fields_set contains the field
        if self.data_ultima_visura is None and "data_ultima_visura" in self.model_fields_set:
            _dict['data_ultima_visura'] = None

        # set to None if flag_esonerato_iscr_albo (nullable) is None
        # and model_fields_set contains the field
        if self.flag_esonerato_iscr_albo is None and "flag_esonerato_iscr_albo" in self.model_fields_set:
            _dict['flag_esonerato_iscr_albo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperatoreModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "num_iscr": obj.get("num_iscr"),
            "profilo_soggetto": obj.get("profilo_soggetto"),
            "data_iscrizione": obj.get("data_iscrizione"),
            "identificativo": obj.get("identificativo"),
            "ipa": obj.get("ipa"),
            "denominazione": obj.get("denominazione"),
            "forma_giuridica_id": obj.get("forma_giuridica_id"),
            "piva": obj.get("piva"),
            "cciaarea": obj.get("cciaarea"),
            "nrea": obj.get("nrea"),
            "data_iscrizione_ri": obj.get("data_iscrizione_ri"),
            "stato_impresa_ri": obj.get("stato_impresa_ri"),
            "dipendenti_ri": obj.get("dipendenti_ri"),
            "data_rilevazione_dipendenti_ri": obj.get("data_rilevazione_dipendenti_ri"),
            "nazione_slid": obj.get("nazione_slid"),
            "provincia_slid": obj.get("provincia_slid"),
            "comune_slid": obj.get("comune_slid"),
            "citta_sl": obj.get("citta_sl"),
            "indirizzo_sl": obj.get("indirizzo_sl"),
            "civico_sl": obj.get("civico_sl"),
            "capsl": obj.get("capsl"),
            "pec": obj.get("pec"),
            "cod_fisc_lr": obj.get("cod_fisc_lr"),
            "cognome_lr": obj.get("cognome_lr"),
            "nome_lr": obj.get("nome_lr"),
            "dipendenti": obj.get("dipendenti"),
            "data_ultima_visura": obj.get("data_ultima_visura"),
            "flag_esonerato_iscr_albo": obj.get("flag_esonerato_iscr_albo")
        })
        return _obj


