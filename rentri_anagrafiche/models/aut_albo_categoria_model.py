# coding: utf-8

"""
    anagrafiche

    Servizio Anagrafica RENTRI

    The version of the OpenAPI document: 1.0.20250114-603
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from rentri_anagrafiche.models.stati_cat_albo import StatiCatAlbo

class AutAlboCategoriaModel(BaseModel):
    """
    AutAlboCategoriaModel
    """
    categoria: Optional[StrictStr] = None
    classe: Optional[StrictStr] = None
    stato: Optional[StatiCatAlbo] = None
    __properties = ["categoria", "classe", "stato"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AutAlboCategoriaModel:
        """Create an instance of AutAlboCategoriaModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if categoria (nullable) is None
        # and __fields_set__ contains the field
        if self.categoria is None and "categoria" in self.__fields_set__:
            _dict['categoria'] = None

        # set to None if classe (nullable) is None
        # and __fields_set__ contains the field
        if self.classe is None and "classe" in self.__fields_set__:
            _dict['classe'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AutAlboCategoriaModel:
        """Create an instance of AutAlboCategoriaModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AutAlboCategoriaModel.parse_obj(obj)

        _obj = AutAlboCategoriaModel.parse_obj({
            "categoria": obj.get("categoria"),
            "classe": obj.get("classe"),
            "stato": obj.get("stato")
        })
        return _obj


