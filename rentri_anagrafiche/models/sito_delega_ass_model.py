# coding: utf-8

"""
    anagrafiche

    Servizio Anagrafica RENTRI

    The version of the OpenAPI document: 1.0.20250114-603
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr
from rentri_anagrafiche.models.stati import Stati

class SitoDelegaAssModel(BaseModel):
    """
    Stato delega soggetto delegato  # noqa: E501
    """
    num_iscr_associazione: Optional[StrictStr] = None
    stato_delega_ass: Optional[Stati] = None
    data_conferma: Optional[datetime] = None
    data_revoca: Optional[datetime] = None
    da_associazione: Optional[StrictBool] = None
    __properties = ["num_iscr_associazione", "stato_delega_ass", "data_conferma", "data_revoca", "da_associazione"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SitoDelegaAssModel:
        """Create an instance of SitoDelegaAssModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if num_iscr_associazione (nullable) is None
        # and __fields_set__ contains the field
        if self.num_iscr_associazione is None and "num_iscr_associazione" in self.__fields_set__:
            _dict['num_iscr_associazione'] = None

        # set to None if data_conferma (nullable) is None
        # and __fields_set__ contains the field
        if self.data_conferma is None and "data_conferma" in self.__fields_set__:
            _dict['data_conferma'] = None

        # set to None if data_revoca (nullable) is None
        # and __fields_set__ contains the field
        if self.data_revoca is None and "data_revoca" in self.__fields_set__:
            _dict['data_revoca'] = None

        # set to None if da_associazione (nullable) is None
        # and __fields_set__ contains the field
        if self.da_associazione is None and "da_associazione" in self.__fields_set__:
            _dict['da_associazione'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SitoDelegaAssModel:
        """Create an instance of SitoDelegaAssModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SitoDelegaAssModel.parse_obj(obj)

        _obj = SitoDelegaAssModel.parse_obj({
            "num_iscr_associazione": obj.get("num_iscr_associazione"),
            "stato_delega_ass": obj.get("stato_delega_ass"),
            "data_conferma": obj.get("data_conferma"),
            "data_revoca": obj.get("data_revoca"),
            "da_associazione": obj.get("da_associazione")
        })
        return _obj


