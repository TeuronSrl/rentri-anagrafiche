# coding: utf-8

"""
    anagrafiche

    Servizio Anagrafica RENTRI

    The version of the OpenAPI document: 1.0.20250114-603
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rentri_anagrafiche.models.aut_albo_categoria_model import AutAlboCategoriaModel
from typing import Optional, Set
from typing_extensions import Self

class AutAlboModel(BaseModel):
    """
    AutAlboModel
    """ # noqa: E501
    sezione: Optional[StrictStr] = None
    numero_iscrizione: Optional[StrictInt] = None
    attiva: Optional[StrictBool] = None
    data_iscrizione: Optional[datetime] = None
    categorie: Optional[List[AutAlboCategoriaModel]] = None
    __properties: ClassVar[List[str]] = ["sezione", "numero_iscrizione", "attiva", "data_iscrizione", "categorie"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutAlboModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in categorie (list)
        _items = []
        if self.categorie:
            for _item_categorie in self.categorie:
                if _item_categorie:
                    _items.append(_item_categorie.to_dict())
            _dict['categorie'] = _items
        # set to None if sezione (nullable) is None
        # and model_fields_set contains the field
        if self.sezione is None and "sezione" in self.model_fields_set:
            _dict['sezione'] = None

        # set to None if data_iscrizione (nullable) is None
        # and model_fields_set contains the field
        if self.data_iscrizione is None and "data_iscrizione" in self.model_fields_set:
            _dict['data_iscrizione'] = None

        # set to None if categorie (nullable) is None
        # and model_fields_set contains the field
        if self.categorie is None and "categorie" in self.model_fields_set:
            _dict['categorie'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutAlboModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sezione": obj.get("sezione"),
            "numero_iscrizione": obj.get("numero_iscrizione"),
            "attiva": obj.get("attiva"),
            "data_iscrizione": obj.get("data_iscrizione"),
            "categorie": [AutAlboCategoriaModel.from_dict(_item) for _item in obj["categorie"]] if obj.get("categorie") is not None else None
        })
        return _obj


