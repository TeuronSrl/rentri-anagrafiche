# coding: utf-8

"""
    anagrafiche

    Servizio Anagrafica RENTRI

    The version of the OpenAPI document: 1.0.20250114-603
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, conlist
from rentri_anagrafiche.models.aut_albo_categoria_model import AutAlboCategoriaModel

class AutAlboModel(BaseModel):
    """
    AutAlboModel
    """
    sezione: Optional[StrictStr] = None
    numero_iscrizione: Optional[StrictInt] = None
    attiva: Optional[StrictBool] = None
    data_iscrizione: Optional[datetime] = None
    categorie: Optional[conlist(AutAlboCategoriaModel)] = None
    __properties = ["sezione", "numero_iscrizione", "attiva", "data_iscrizione", "categorie"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AutAlboModel:
        """Create an instance of AutAlboModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in categorie (list)
        _items = []
        if self.categorie:
            for _item in self.categorie:
                if _item:
                    _items.append(_item.to_dict())
            _dict['categorie'] = _items
        # set to None if sezione (nullable) is None
        # and __fields_set__ contains the field
        if self.sezione is None and "sezione" in self.__fields_set__:
            _dict['sezione'] = None

        # set to None if data_iscrizione (nullable) is None
        # and __fields_set__ contains the field
        if self.data_iscrizione is None and "data_iscrizione" in self.__fields_set__:
            _dict['data_iscrizione'] = None

        # set to None if categorie (nullable) is None
        # and __fields_set__ contains the field
        if self.categorie is None and "categorie" in self.__fields_set__:
            _dict['categorie'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AutAlboModel:
        """Create an instance of AutAlboModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AutAlboModel.parse_obj(obj)

        _obj = AutAlboModel.parse_obj({
            "sezione": obj.get("sezione"),
            "numero_iscrizione": obj.get("numero_iscrizione"),
            "attiva": obj.get("attiva"),
            "data_iscrizione": obj.get("data_iscrizione"),
            "categorie": [AutAlboCategoriaModel.from_dict(_item) for _item in obj.get("categorie")] if obj.get("categorie") is not None else None
        })
        return _obj


