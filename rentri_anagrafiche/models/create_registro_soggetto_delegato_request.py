# coding: utf-8

"""
    anagrafiche

    Servizio Anagrafica RENTRI

    The version of the OpenAPI document: 1.0.20250114-603
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, constr

class CreateRegistroSoggettoDelegatoRequest(BaseModel):
    """
    CreateRegistroSoggettoDelegatoRequest
    """
    num_iscr_sito: constr(strict=True, min_length=1) = Field(default=..., description="Numero iscrizione unità locale rilasciato all'iscrizione. Per recuperare l'identificativo attribuito all'unità locale delegante consultare l'operazione Elenco unità locali deleganti  nell'area riservata Soggetti delegati dove è presente la voce Num. iscr. UL.")
    num_iscr_ass: constr(strict=True, min_length=1) = Field(default=..., description="Numero iscrizione soggetto delegato rilasciato all'iscrizione. Per recuperare il numero iscrizione soggetto delegato consultare l'operazione Elenco soggetti delegati iscritti nell'area riservata Soggetti delegati dove è presente la voce Numero iscrizione")
    descrizione: constr(strict=True, max_length=250, min_length=1) = Field(default=..., description="Descrizione del registro")
    __properties = ["num_iscr_sito", "num_iscr_ass", "descrizione"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateRegistroSoggettoDelegatoRequest:
        """Create an instance of CreateRegistroSoggettoDelegatoRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateRegistroSoggettoDelegatoRequest:
        """Create an instance of CreateRegistroSoggettoDelegatoRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateRegistroSoggettoDelegatoRequest.parse_obj(obj)

        _obj = CreateRegistroSoggettoDelegatoRequest.parse_obj({
            "num_iscr_sito": obj.get("num_iscr_sito"),
            "num_iscr_ass": obj.get("num_iscr_ass"),
            "descrizione": obj.get("descrizione")
        })
        return _obj


